flag: cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9

The level works using what's left of the stack after a function.
The levels contains 3 functions: main, p and pp. main calls pp, which call p 2 times,
asking each time the user to write something on the stdin.
Here is the decompiled code:

int main() {
	char buff[54];
	pp(buff);
	puts(buff);
}

void pp(char *buff) {
	char start[20];
	char end[20];

	p(start);
	p(end);

	strcpy(buff, start);
	buff+strlen(start) = ' ';
	strcat(buff, end);
}

void p(char *buff) {
	char *reader[4104];

	read(0, reader, 4096);
	*strchr(reader, '\n') = '\0';
	strncpy(buff, reader, 20);
}

The two entries are stored in 2 buffers, each with a size of 20 bytes.
The program strcpy the first string in the result buffer, then strcat the second one.
Of course, if we put 20 characters in the first buffer, it will skip the '\0' mandatory
for strcpy to work, so strcpy will continue looking in the stack for a null-byte to
stop it. Immediatly after the first buffer, we got the second buffer, so strcpy will
fill the result buffer with the first AND the second buffer, then strcat will put the
second buffer a second time (There's also a space between the two entries).
This is great, because instead of 2 times 20 bytes for a total of 40 which is not
nearly enough to overflow the 54 byte of the result buffer, we now have 3 times
20 bytes.

We can also see that each call to the read function reads 4096 bytes and puts them in a
4104-bytes buffer. The thing is, after the first call to p, the values in this buffer
are not wiped, they still exist, the stack just doesn't remember them.
Using gdb, we can place ourselves right before the call to read to check where is the
esp pointer. This will indicate the start of the buffer as it is the last variable
registered in the stack: The address is 0xbfffe670.

We know that the result buffer will partially overwrite this buffer because it is in
the stack too and strcpy/strcat will be called after p, what we want to know is how
much does it get overwrote. Some other buffers will also overwrite it like the
buffer of the second entry but it doesn't matter as it is smaller than the result buff.
The result buffer will be, as described higher, 3 times 20 bytes plus 1 space, so
61 bytes.

So we place our shellcode at least 61 bytes (let's say 70) from the start of the
buffer so it is registered somewhere in the ram but it doesn't get overwrote.
We know want to overflow the buffer to overwrite eip and tell it to go
to 0xbfffe670+70, but what is the offset before eip ?
Simple arithmetic:
The first buffer is 20 bytes, strcpy continues looking in the stack so it finds the
first parameter of the function, 4 bytes, then the second buffer, 20 bytes. We got
another byte for the space between the 2 entries. This is currently 45 bytes, the
buffer is set on 54 bytes, so 54-45=9, which means we got eip right after theses
9 bytes.
So 9 bytes of padding, the address, and we don't forget 7 bytes of padding to make the
second buffer 20 bytes.
We also put a padding of NOPs on the first buffer so that it goes to the next address
and we don't bother having the exact offset.

(python -c 'print "\x90"*70+"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"'; python -c 'print "A"*9+"\xb6\xe6\xff\xbf"+"A"*7'; cat) | ./bonus0

> cat /home/user/bonus1/.pass
